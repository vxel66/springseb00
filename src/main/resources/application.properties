# : 주석
#application.properties : 애플리케이션 프로젝트 설정 파일

# 자동빌드
spring.devtools.restart.enabled = true 

# 1. 내장 톰캣 서버 포트 변경
server.port = 8083

## 1. mysql 드라이버 클래스 호출 [  그레이들 추가 : mysql:mysql-connector-java ]
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
## 2. db 연결 =" jdbc:mysql://IP주소:PORT번호/DB명
#spring.datasource.url=jdbc:mysql://awsrds.cfn0mqcs8fkx.ap-northeast-2.rds.amazonaws.com:3306/spring?serverTimezone=Asia/Seoul
## 3. db 계정정보
#spring.datasource.username=admin
#spring.datasource.password=alsdnr5341



# 2. mysql 설정
# 1. mysql 드라이버 클래스 호출 [  그레이들 추가 : mysql:mysql-connector-java ]
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# 2. db 연결 =" jdbc:mysql://IP주소:PORT번호/DB명
spring.datasource.url=jdbc:mysql://localhost:3307/spring?serverTimezone=Asia/Seoul
# 3. db 계정정보
spring.datasource.username=root
spring.datasource.password=1234
############## 이후부터 는 선택사항 ###############
# 4. sql 문을 console 에 표기
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.show-sql=true
# 4. sql 문을 console 에 보기 좋게 표기
spring.jpa.properties.hibernate.format_sql=false
# 4. SQL 문을 console에  ? 파라미터가 뭐인지 표기
logging.level.org.hibernate.type.descriptor.sql = trace

# 5. DDL 자동 옵션
# 서버 실행시 변경사항이 있을경우 자동 업데이트
spring.jpa.hibernate.ddl-auto=update
# 서버 실행시 기존테이블 삭제후 자동 생성
#spring.jpa.hibernate.ddl.auto = create

# 6. mysql 외 다른 db언어를 사용히 호환해주는 역할 [ MySQL8Dialect 라는 공통 db 사용 ]
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

spring.mail.host=smtp.naver.com
spring.mail.port = 587
spring.mail.username = @
spring.mail.password = @
spring.mail.properties.mail.smtp.auth = true
spring.mail.properties.mail.smtp.starttls.enable = true

## 카카오 로그인 설정

## 클라이이언트의 rest api키 와 보안코드
spring.security.oauth2.client.registration.kakao.client-id = 61fc080cc7b086b66c4eaedc1fc10bbe
spring.security.oauth2.client.registration.kakao.client-secret = o8tzeqA4fpcTZKQXUgHk8f4wZxGFczz3

# 2. 동의항목 [ 동의항목 ID ]
spring.security.oauth2.client.registration.kakao.scope = profile_nickname , account_email
# 3. 클라이언트 이름
spring.security.oauth2.client.registration.kakao.client-name = kakao
# 4. 토큰 요청 방식 [ ** 카카오만 해당 ]
spring.security.oauth2.client.registration.kakao.client-authentication-method = post
# 5. 토큰 요청
spring.security.oauth2.client.registration.kakao.authorization-grant-type = authorization_code
# 6. 요청url : Redirect URI           http://localhost:8083/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.redirect_uri ={baseUrl}/{action}/oauth2/code/{registrationId}

# 7. 요청 url : 인증 URI
spring.security.oauth2.client.provider.kakao.authorization-uri =https://kauth.kakao.com/oauth/authorization
# 7. 요청 url : 토큰 URI
spring.security.oauth2.client.provider.kakao.token-uri = https://kauth.kakao.com/oauth/token
# 7. 요청 url : 토큰 받은 회원정보 URI
spring.security.oauth2.client.provider.kakao.user-info-uri =https://kapi.kakao.com/v2/user/me
# 7. 회원정보 가져올 이름
spring.security.oauth2.client.provider.kakao.user-name-attribute = kakao_account

## 네이버 로그인 설정

## 클라이이언트의 rest api키 와 보안코드
spring.security.oauth2.client.registration.naver.client-id =U9AGxEaXM3JhBfixdP6Z
spring.security.oauth2.client.registration.naver.client-secret =vPpbWdwVzr 

# 2. 동의항목 [ 동의항목 ID ]
spring.security.oauth2.client.registration.naver.scope = name , email 
# 3. 클라이언트 이름
spring.security.oauth2.client.registration.naver.client-name= naver
# 5. 토큰 요청
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
# 6. 요청url : Redirect URI
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/{action}/oauth2/code/{registrationId}

# 7. 요청 url : 인증 URI
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
# 8. 요청 url : 토큰 URI
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
# 9. 요청 url : 토큰 받은 회원정보 URI
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
# 10. 회원정보 가져올 이름 [ json형식으로 response 키값을 이용해서 ]
spring.security.oauth2.client.provider.naver.user-name-attribute=response

## 구글
spring.security.oauth2.client.registration.google.client-id =229702279291-ek9fedkg9u7s0fj757g2ja2j9fvmm3oh.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret =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

# 2. 동의항목 [ 동의항목 ID ]
spring.security.oauth2.client.registration.google.scope = email ,profile











